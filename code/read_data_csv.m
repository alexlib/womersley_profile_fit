function [VarName1,PA_Surgery_90_Aortic,PA_Surgery_90_Branch,VarName4,Normalisedtime,PA_Surgery_135_Aortic,PA_Surgery_135_Branch,VarName8,Normalisedtime1,PA_Hybrid_90_Aortic,PA_Hybrid_90_Branch,VarName12,Normalisedtime2,PA_Hybrid_115_Aortic,PA_Hybrid_115_Branch,VarName16,Normalisedtime3,PA_Hybrid_135_Aortic,PA_Hybrid_135_Branch,VarName20,Normalisedtime4,PA_Chimney_90_Aortic,PA_Chimney_90_Branch,VarName24,Normalisedtime5,PA_Chimney_115_Aortic,PA_Chimney_115_Branch,VarName28,Normalisedtime6,PA_Chimney_135_Aortic,PA_Chimney_135_Branch] = importfile(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as column vectors.
%   [VARNAME1,PA_SURGERY_90_AORTIC,PA_SURGERY_90_BRANCH,VARNAME4,NORMALISEDTIME,PA_SURGERY_135_AORTIC,PA_SURGERY_135_BRANCH,VARNAME8,NORMALISEDTIME1,PA_HYBRID_90_AORTIC,PA_HYBRID_90_BRANCH,VARNAME12,NORMALISEDTIME2,PA_HYBRID_115_AORTIC,PA_HYBRID_115_BRANCH,VARNAME16,NORMALISEDTIME3,PA_HYBRID_135_AORTIC,PA_HYBRID_135_BRANCH,VARNAME20,NORMALISEDTIME4,PA_CHIMNEY_90_AORTIC,PA_CHIMNEY_90_BRANCH,VARNAME24,NORMALISEDTIME5,PA_CHIMNEY_115_AORTIC,PA_CHIMNEY_115_BRANCH,VARNAME28,NORMALISEDTIME6,PA_CHIMNEY_135_AORTIC,PA_CHIMNEY_135_BRANCH]
%   = IMPORTFILE(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   [VARNAME1,PA_SURGERY_90_AORTIC,PA_SURGERY_90_BRANCH,VARNAME4,NORMALISEDTIME,PA_SURGERY_135_AORTIC,PA_SURGERY_135_BRANCH,VARNAME8,NORMALISEDTIME1,PA_HYBRID_90_AORTIC,PA_HYBRID_90_BRANCH,VARNAME12,NORMALISEDTIME2,PA_HYBRID_115_AORTIC,PA_HYBRID_115_BRANCH,VARNAME16,NORMALISEDTIME3,PA_HYBRID_135_AORTIC,PA_HYBRID_135_BRANCH,VARNAME20,NORMALISEDTIME4,PA_CHIMNEY_90_AORTIC,PA_CHIMNEY_90_BRANCH,VARNAME24,NORMALISEDTIME5,PA_CHIMNEY_115_AORTIC,PA_CHIMNEY_115_BRANCH,VARNAME28,NORMALISEDTIME6,PA_CHIMNEY_135_AORTIC,PA_CHIMNEY_135_BRANCH]
%   = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW
%   through ENDROW of text file FILENAME.
%
% Example:
%   [VarName1,PA_Surgery_90_Aortic,PA_Surgery_90_Branch,VarName4,Normalisedtime,PA_Surgery_135_Aortic,PA_Surgery_135_Branch,VarName8,Normalisedtime1,PA_Hybrid_90_Aortic,PA_Hybrid_90_Branch,VarName12,Normalisedtime2,PA_Hybrid_115_Aortic,PA_Hybrid_115_Branch,VarName16,Normalisedtime3,PA_Hybrid_135_Aortic,PA_Hybrid_135_Branch,VarName20,Normalisedtime4,PA_Chimney_90_Aortic,PA_Chimney_90_Branch,VarName24,Normalisedtime5,PA_Chimney_115_Aortic,PA_Chimney_115_Branch,VarName28,Normalisedtime6,PA_Chimney_135_Aortic,PA_Chimney_135_Branch]
%   = importfile('data.csv',2, 249);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2020/09/06 10:16:44

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,5,6,7,9,10,11,13,14,15,17,18,19,21,22,23,25,26,27,29,30,31]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end

%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [1,2,3,5,6,7,9,10,11,13,14,15,17,18,19,21,22,23,25,26,27,29,30,31]);
rawCellColumns = raw(:, [4,8,12,16,20,24,28]);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names
VarName1 = cell2mat(rawNumericColumns(:, 1));
PA_Surgery_90_Aortic = cell2mat(rawNumericColumns(:, 2));
PA_Surgery_90_Branch = cell2mat(rawNumericColumns(:, 3));
VarName4 = rawCellColumns(:, 1);
Normalisedtime = cell2mat(rawNumericColumns(:, 4));
PA_Surgery_135_Aortic = cell2mat(rawNumericColumns(:, 5));
PA_Surgery_135_Branch = cell2mat(rawNumericColumns(:, 6));
VarName8 = rawCellColumns(:, 2);
Normalisedtime1 = cell2mat(rawNumericColumns(:, 7));
PA_Hybrid_90_Aortic = cell2mat(rawNumericColumns(:, 8));
PA_Hybrid_90_Branch = cell2mat(rawNumericColumns(:, 9));
VarName12 = rawCellColumns(:, 3);
Normalisedtime2 = cell2mat(rawNumericColumns(:, 10));
PA_Hybrid_115_Aortic = cell2mat(rawNumericColumns(:, 11));
PA_Hybrid_115_Branch = cell2mat(rawNumericColumns(:, 12));
VarName16 = rawCellColumns(:, 4);
Normalisedtime3 = cell2mat(rawNumericColumns(:, 13));
PA_Hybrid_135_Aortic = cell2mat(rawNumericColumns(:, 14));
PA_Hybrid_135_Branch = cell2mat(rawNumericColumns(:, 15));
VarName20 = rawCellColumns(:, 5);
Normalisedtime4 = cell2mat(rawNumericColumns(:, 16));
PA_Chimney_90_Aortic = cell2mat(rawNumericColumns(:, 17));
PA_Chimney_90_Branch = cell2mat(rawNumericColumns(:, 18));
VarName24 = rawCellColumns(:, 6);
Normalisedtime5 = cell2mat(rawNumericColumns(:, 19));
PA_Chimney_115_Aortic = cell2mat(rawNumericColumns(:, 20));
PA_Chimney_115_Branch = cell2mat(rawNumericColumns(:, 21));
VarName28 = rawCellColumns(:, 7);
Normalisedtime6 = cell2mat(rawNumericColumns(:, 22));
PA_Chimney_135_Aortic = cell2mat(rawNumericColumns(:, 23));
PA_Chimney_135_Branch = cell2mat(rawNumericColumns(:, 24));

